---
#setup_docker.yml
# -----------------------------------------------------------------------------
# New Play for EC2 Docker Setup
# -----------------------------------------------------------------------------
- name: Update Yum on EC2 Instances
  hosts: web # Target your EC2 hosts group from inventory
  gather_facts: no
  connection: ssh
  become: yes
  vars_files:
    - ../group_vars/global_vars.yml # Ensure this file contains the necessary variables
  vars:
    ansible_user_on_ec2: "ec2-user" # Or your specific remote user


  tasks:
    - name: 1. Update all yum packages
      ansible.builtin.yum:
        name: '*'
        state: latest
        update_cache: yes

    - name: 2. Install Docker (using yum)
      shell: sudo yum install -y docker

      register: docker_install_result

    - name: 3. Start Docker service
      ansible.builtin.systemd:
        name: docker
        state: started

    - name: 4. Enable Docker service to start on boot
      ansible.builtin.systemd:
        name: docker
        enabled: yes

    - name: 5. Add the connected user (ansible_user) to the Docker group
      ansible.builtin.user:
        name: "{{ ansible_user_on_ec2 }}" # The user Ansible connects as (e.g., ec2-user)
        groups: docker
        append: yes # Add to existing groups
      # Note: If you want to add a *different* user, specify that username instead.

    - name: 6. Apply group changes (informational - requires new login/shell)
      ansible.builtin.debug:
        msg: "User '{{ ansible_user }}' added to docker group. A new login/shell session is required for group changes to take effect for this user, or use 'newgrp docker'. Ansible's subsequent Docker tasks in this play will run as root (due to 'become: yes') so they will work immediately."

      # The 'newgrp docker' command is tricky with Ansible as it spawns a subshell.
      # Subsequent Ansible tasks that interact with Docker within *this same play*
      # will work if `become: yes` is used, because they'll run as root.
      # If you have subsequent non-become tasks for the *same user* that need Docker
      # access without sudo, they might fail until the user logs out and back in.

    - name: 7. Verify Docker installation by running hello-world
      ansible.builtin.command: docker run hello-world
      register: docker_hello_world
      changed_when: false # This command doesn't change state, just verifies
      # This will run as root due to 'become: yes'

    # - name: Assume IAM role
    #   command: >
    #     aws sts assume-role
    #     --role-arn "{{ role_arn }}"
    #     --role-session-name "ansible-ecr-pull"
    #   register: assumed_role

    # - name: Set temporary credentials
    #   set_fact:
    #     aws_access_key: "{{ assumed_role.stdout | from_json | json_query('Credentials.AccessKeyId') }}"
    #     aws_secret_key: "{{ assumed_role.stdout | from_json | json_query('Credentials.SecretAccessKey') }}"
    #     aws_session_token: "{{ assumed_role.stdout | from_json | json_query('Credentials.SessionToken') }}"

    # - name: Get ECR login password
    #   ansible.builtin.command: "aws ecr get-login-password --region {{ aws_region }}"
    #   register: ecr_login_password_result
    #   changed_when: false # This command itself doesn't change state
    #   check_mode: no # Must run to get the password
    #   no_log: true # Avoids logging the password
    #   environment:
    #     AWS_ACCESS_KEY_ID: "{{ aws_access_key }}" #Required, was previously removed.
    #     AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}" #Required, was previously removed
    #     AWS_SESSION_TOKEN: "{{ aws_session_token }}" # Required, was previously removed

    # - name: Authenticate Docker with AWS ECR
    #   ansible.builtin.shell: >
    #     echo "{{ ecr_login_password_result.stdout }}" |
    #     docker login --username AWS --password-stdin 686255962220.dkr.ecr.us-west-1.amazonaws.com