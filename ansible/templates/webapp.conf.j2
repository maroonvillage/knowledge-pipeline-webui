# /etc/nginx/conf.d/webapp.conf
#
# This configuration is for use WITH A PUBLIC DNS NAME and a SELF-SIGNED SSL CERTIFICATE.
# It redirects HTTP to HTTPS and reverse-proxies to the Docker container.

#================================================================
# Server Block 1: HTTP to HTTPS Redirect
#================================================================
server {
    listen 80;
    listen [::]:80;

    # ### CHANGE THIS ###
    # Replace the placeholder with your EC2 instance's public DNS name.
    # The name here MUST MATCH the "Common Name" (CN) you used when creating the self-signed cert.
    # Alternatively, you can use "_" as a catch-all if you only have one site.
    server_name _;

    # Redirect all traffic to the HTTPS version.
    return 301 https://$host$request_uri;
}
#================================================================
# Server Block 2: The Main HTTPS Server with Self-Signed Cert
#================================================================
server {

    # This makes this the default server for port 443.
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    http2 on;

    # ### CHANGE THIS ###
    # Use the same EC2 public DNS name here.
    server_name {{ public_dns_name }};

    # --- Self-Signed SSL Certificate Configuration ---
    # ### CHANGE THIS ###
    # Provide the FULL, ABSOLUTE path to the certificate and private key files you
    # generated with openssl. Common locations are /etc/ssl/certs and /etc/ssl/private.
    ssl_certificate /etc/ssl/certs/selfsigned.crt;
    ssl_certificate_key /etc/ssl/private/selfsigned.key;

    # --- Standard SSL Security Settings ---
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";

    # --- Reverse Proxy Configuration ---
    location / {
        # ### CHANGE THIS (if needed) ###
        # Replace 3000 with the port your Docker container is listening on.
        proxy_pass http://127.0.0.1:3000;

        # Standard headers to pass client information to the backend app.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Required for WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}