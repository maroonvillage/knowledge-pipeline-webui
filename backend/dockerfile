# backend/Dockerfile

# 1. Base Image: Use an official Python runtime image.
# Choose a version compatible with your project. 'slim' versions are smaller.
FROM python:3.11-slim

# 2. Set Environment Variables (Optional but recommended)
#Prevents Python from writing .pyc files to disk
ENV PYTHONDONTWRITEBYTECODE=1 
#Prevents python from buffering stdout/stderr
ENV PYTHONUNBUFFERED=1      

# 3. Set Working Directory
WORKDIR /backend

# 4. Install System Dependencies (if any)
# RUN apt-get update && apt-get install -y --no-install-recommends some-package && rm -rf /var/lib/apt/lists/*

# 5. Copy and Install Python Dependencies
# Copy only requirements first to leverage Docker cache
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip
RUN pip install --no-cache-dir -r requirements.txt

# 6. Copy Application Code
# Copy the rest of your backend application code into the container
#COPY ./app /app/app
COPY . .
# If you have other top-level files/dirs in backend/ needed at runtime, copy them too
# COPY ./other_folder /app/other_folder


# Copy the pre-built wheel file(s) into the image
COPY ./dist /backend/dist/

# Install the local package from the wheel file
RUN pip install --no-cache-dir --prefer-binary /backend/dist/pdfdocintel-0.1.0-py3-none-any.whl

# Clean up the copied dist directory (optional, saves a bit of space)
RUN rm -rf /backend/dist

# 7. Expose the Port the app runs on
# This doesn't publish the port, just documents it. Publishing happens in docker-compose.yml.
EXPOSE 8000

# 8. Command to Run the Application
# Use uvicorn to run the FastAPI app. Adjust 'app.main:app' if your entry point is different.
# Use '--host 0.0.0.0' to make it accessible from outside the container (within the Docker network).
CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]